TestCase subclass: #AnswerTest	instanceVariableNames: 'answer'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 00:29'!testPositiveVotes	answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.	! !!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 00:29'!testNegativeVotes			answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 1.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 2.! !!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 00:29'!testVotesForNewAnswer	self assert: (answer negativeVotes size) equals: 0.	self assert: (answer positiveVotes size) equals: 0.		! !!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 03:43'!testPositiveAndNegativeVotesInterference		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 0.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 2.		self assert: answer votes size equals: 4.! !!AnswerTest methodsFor: 'setup' stamp: 'Anonymous 4/21/2020 00:22'!setUp	answer := Answer new:'An answer'  user:(User new)  question:(Question new).! !TestCase subclass: #QuestionRetrieverTest	instanceVariableNames: 'cuoora socialRetriever topicsRetriever newsRetriever popularTodayRetriever user1 user2 user3 topicOO1 topicOO2 questionUser1TopicOO1 questionUser3TopicOO2 questionUser2TopicOO2 question2User3TopicOO2'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionRetrieverTest methodsFor: 'set up' stamp: 'donnivalen 5/11/2020 21:16'!setUp	user1 := User new.	user2 := User new.	user3 := User new.	user1		follow: user2;		follow: user3.	topicOO1 := Topic		name: 'OO1'		description: 'This topic is for discussing about OO1 issues'.	topicOO2 := Topic		name: 'OO2'		description: 'This topic is for discussing about OO2 issues'.	user1 addTopic: topicOO1.	user2 addTopic: topicOO2.	user3 addTopic: topicOO2.	cuoora := CuOOra new.	cuoora		addUser: user1;		addUser: user2;		addUser: user3.	questionUser1TopicOO1 := Question		newWithTitle: 'How to create a class in Pharo'		description: ''		user: user1		topic: topicOO1.	questionUser3TopicOO2 := Question		newWithTitle: 'How to create a WAComponent for...'		description: ''		user: user3		topic: topicOO2.	cuoora addQuestion: questionUser1TopicOO1 forUser: user1.	cuoora addQuestion: questionUser3TopicOO2 forUser: user3.	socialRetriever := Social new: cuoora .	topicsRetriever := Topics new: cuoora .	newsRetriever := News new: cuoora.	popularTodayRetriever := PopularToday 		new: cuoora.! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'donnivalen 5/11/2020 21:40'!popularTodayTwoLikesFourQuestionsAtLeastOneVote	   "2 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user2 likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'ArturoZambrano 4/25/2020 18:47'!popularTodayFourLikesFourQuestionsAtLeastOneVote	  "4 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user1 likesPublication: question2User3TopicOO2).  question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing'!testTopicsRetrieveQuestions  | questionUser2TopicOO2 |  self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 0.  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) first equals: questionUser2TopicOO2.  self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'ArturoZambrano 4/25/2020 18:44'!popularTodayFourQuestionsAtLeastOneVote	  "1 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 := Question newWithTitle: 'Which refactoring should...' description: '' user: user3 topic: topicOO2.  cuoora addQuestion: question2User3TopicOO2 forUser: user3.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'donnivalen 5/11/2020 21:36'!testSocialRetrieveQuestions	|questionUser2TopicOO5|		self		assert: (socialRetriever retrieveQuestions: user1) size		equals: 1.	self		assert: (socialRetriever retrieveQuestions: user1) first		equals: questionUser3TopicOO2.	self		assert: (socialRetriever retrieveQuestions: user2) size		equals: 0.	self		assert: (socialRetriever retrieveQuestions: user3) size		equals: 0.		questionUser2TopicOO5 := Question		newWithTitle: 'Which bad smell...?'		description: ''		user: user2		topic: topicOO2.			questionUser2TopicOO5		addVote: (Vote user: user2 dislikesPublication: questionUser2TopicOO5).		cuoora addQuestion: questionUser2TopicOO5 forUser: user2.	self		assert: (socialRetriever retrieveQuestions: user1) size		equals: 2.			self		assert: (socialRetriever retrieveQuestions: user1) last		equals: questionUser2TopicOO5.	self		assert: (socialRetriever retrieveQuestions: user3) size		equals: 0.	self		assert: (socialRetriever retrieveQuestions: user2) size		equals: 0! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'ArturoZambrano 4/25/2020 18:42'!popularTodayNoLikesThreeQuestions  "0 likes / 3 preguntas "  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 2! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'ArturoZambrano 4/25/2020 18:48'!testPopularTodayRetrieveQuestions  self     popularTodayNoLikesTwoQuestions;     popularTodayNoLikesThreeQuestions;     popularTodayAtLeastOneVote;     popularTodayFourQuestionsAtLeastOneVote;     popularTodayTwoLikesFourQuestionsAtLeastOneVote;     popularTodayFourLikesFourQuestionsAtLeastOneVote;     popularTodayFiveLikesFourQuestionsAtLeastOneVote! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'ArturoZambrano 4/25/2020 18:42'!popularTodayAtLeastOneVote   "1 likes / 2 preguntas // preguntas con al menos 1 voto"  questionUser2TopicOO2 addVote: (Vote user: user3 likesPublication: questionUser2TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 03:25'!testNewsRetrieveQuestions	| questionUser2TopicOO2 |	self assert: (newsRetriever retrieveQuestions: user1) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user1) last equals: questionUser3TopicOO2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user3) last equals: questionUser1TopicOO1.		questionUser2TopicOO2 := Question		newWithTitle: 'Which bad smell...?'		description: ''		user: user2		topic: topicOO2.	cuoora addQuestion: questionUser2TopicOO2 forUser: user2.		self assert: (newsRetriever retrieveQuestions: user1) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 2.! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'ArturoZambrano 4/25/2020 18:47'!popularTodayFiveLikesFourQuestionsAtLeastOneVote  "5 likes / 4 preguntas // preguntas con mas de 1 voto"question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user1) first equals: question2User3TopicOO2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 0.  15 timesRepeat: [ questionUser1TopicOO1 addVote: (Vote user: User new likesPublication: questionUser1TopicOO1) ].  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) first equals: questionUser1TopicOO1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) first equals: questionUser1TopicOO1! !!QuestionRetrieverTest methodsFor: 'testing' stamp: 'ArturoZambrano 4/25/2020 18:43'!popularTodayNoLikesTwoQuestions	self		assert: (popularTodayRetriever retrieveQuestions: user1) size		equals: 1.	"0 likes / 2 preguntas "	self		assert: (popularTodayRetriever retrieveQuestions: user1) last		equals: questionUser3TopicOO2.	self		assert: (popularTodayRetriever retrieveQuestions: user2) size		equals: 2.	self		assert: (popularTodayRetriever retrieveQuestions: user3) size		equals: 1.	self		assert: (popularTodayRetriever retrieveQuestions: user3) last		equals: questionUser1TopicOO1! !TestCase subclass: #QuestionTest	instanceVariableNames: 'question'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionTest methodsFor: 'setup' stamp: 'Anonymous 4/21/2020 02:07'!setUp	question := Question  newWithTitle: 'Question  title' description: 'Question description' user: (User new) ! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 02:08'!testVotesForNewQuestion	self assert: (question negativeVotes size) equals: 0.	self assert: (question positiveVotes size) equals: 0.		! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 02:08'!testPositiveVotes	question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 2.	! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 02:07'!testNegativeVotes			question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 2.! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 4/21/2020 12:24'!testPositiveAndNegativeVotesInterference		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question positiveVotes size) equals: 0.	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.	self assert: (question negativeVotes size) equals: 1.		self assert: question votes size equals: 2.! !Object subclass: #CuOOra	instanceVariableNames: 'users topics questions'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!CuOOra methodsFor: 'adding' stamp: 'SergioFirmenich 4/22/2019 23:47'!addTopic: aTopic	topics add: aTopic ! !!CuOOra methodsFor: 'adding' stamp: 'SergioFirmenich 4/22/2019 23:47'!addUser: aUser	users add: aUser ! !!CuOOra methodsFor: 'adding' stamp: 'SDFirmenich 4/25/2019 12:59'!addQuestion: aQuestion forUser: aUser	aUser addQuestion: aQuestion.	questions add: aQuestion.! !!CuOOra methodsFor: 'adding' stamp: 'SergioFirmenich 4/22/2019 23:47'!addQuestion: aQuestion	questions add: aQuestion! !!CuOOra methodsFor: 'initialize' stamp: 'SergioFirmenich 4/22/2019 23:46'!initialize	users := OrderedCollection new.	topics := OrderedCollection new.	questions := OrderedCollection new! !!CuOOra methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 23:48'!users	^ users! !!CuOOra methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 23:48'!questions	^ questions! !!CuOOra methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 23:48'!topics	^ topics! !Object subclass: #Post	instanceVariableNames: 'timestamp user votes description'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Post methodsFor: 'adding' stamp: 'donnivalen 5/11/2020 19:34'!addVote: aVote	votes add: aVote! !!Post methodsFor: 'initialization' stamp: 'donnivalen 5/11/2020 19:37'!initialize 			votes := OrderedCollection new.		timestamp := DateAndTime now.! !!Post methodsFor: 'accessing' stamp: 'donnivalen 5/11/2020 19:34'!description	^ description! !!Post methodsFor: 'accessing' stamp: 'donnivalen 5/11/2020 19:34'!user	^ user! !!Post methodsFor: 'accessing' stamp: 'donnivalen 5/11/2020 19:34'!timestamp	^ timestamp! !!Post methodsFor: 'accessing' stamp: 'donnivalen 5/11/2020 19:34'!votes	^ votes! !!Post methodsFor: 'as yet unclassified'!positiveVotes	^ votes select: [ :vote | vote isLike]! !!Post methodsFor: 'as yet unclassified'!negativeVotes	^ votes reject: [ :vote | vote isLike]! !!Post methodsFor: 'private' stamp: 'donnivalen 5/11/2020 19:51'!user: anUser	user := anUser! !!Post methodsFor: 'private' stamp: 'donnivalen 5/11/2020 19:50'!description: aString	description := aString! !!Post methodsFor: 'private' stamp: 'donnivalen 5/11/2020 19:51'!timestamp: aDateAndTime	timestamp := aDateAndTime ! !Post subclass: #Answer	instanceVariableNames: 'question'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Answer methodsFor: 'private' stamp: 'SergioFirmenich 4/23/2019 00:11'!question: aQuestion	question := aQuestion ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'instance creation' stamp: 'SergioFirmenich 4/22/2019 23:40'!new: anAnswer user: aUser question: aQuestion	^ self new		description: anAnswer;		user: aUser;		question: aQuestion;		yourself! !Post subclass: #Question	instanceVariableNames: 'title answers topics'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Question methodsFor: 'private' stamp: 'SDFirmenich 4/23/2019 09:54'!title: aTitle	title := aTitle ! !!Question methodsFor: 'accessing' stamp: 'SergioFirmenich 4/23/2019 00:20'!topics	^topics ! !!Question methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 09:54'!title	^title ! !!Question methodsFor: 'accessing'!fromToday^timestamp asDate = Date today! !!Question methodsFor: 'adding' stamp: 'SDFirmenich 4/25/2019 13:29'!addTopic: aTopic	topics add: aTopic.	aTopic addQuestion: self.! !!Question methodsFor: 'initalize-release' stamp: 'donnivalen 5/11/2020 19:37'!initialize	super initialize.	answers := OrderedCollection new.	topics := OrderedCollection new.! !!Question methodsFor: 'as yet unclassified'!positiveVotesQuantity	^ self positiveVotes size ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'instance creation' stamp: 'SDFirmenich 4/25/2019 13:07'!newWithTitle: title description: aDescription user: aUser topic: aTopic	^ self new		title: title;		description: aDescription;		addTopic: aTopic;		user: aUser;		yourself.! !!Question class methodsFor: 'instance creation' stamp: 'SDFirmenich 4/25/2019 13:06'!newWithTitle: title description: aDescription user: aUser	^ self new		title: title;		description: aDescription;		user: aUser;		yourself.! !Object subclass: #QuestionRetriever	instanceVariableNames: 'cuoora'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!QuestionRetriever methodsFor: 'as yet unclassified' stamp: 'donnivalen 5/15/2020 18:21'!filterQuestion: aCollection Of: aUser	| qRetCol |	qRetCol := self sort: aCollection.	"vuelve ordenada por cantidad de votos de cada pregunta de >"	qRetCol := qRetCol last: (100 min: aCollection size).	^ qRetCol reject: [ :q | q user = aUser ]! !!QuestionRetriever methodsFor: 'as yet unclassified'!retrieveQuestions: aUser	^ self subclassResponsibility! !!QuestionRetriever methodsFor: 'private'!cuoora: aCuooraInstance	cuoora := aCuooraInstance! !!QuestionRetriever methodsFor: 'private' stamp: 'donnivalen 5/15/2020 18:21'!sort: aCollectionOfQuestions	^ aCollectionOfQuestions		asSortedCollection: [ :a :b | a positiveVotes size > b positiveVotes size ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QuestionRetriever class	instanceVariableNames: ''!!QuestionRetriever class methodsFor: 'instance creation' stamp: 'SergioFirmenich 4/22/2019 23:40'!new: cuoora	^ self new cuoora: cuoora! !QuestionRetriever subclass: #News	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!News methodsFor: 'as yet unclassified' stamp: 'donnivalen 5/15/2020 18:21'!retrieveQuestions: aUser	^ self		filterQuestion: (cuoora questions select: [ :q | q fromToday ])		Of: aUser! !QuestionRetriever subclass: #PopularToday	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!PopularToday methodsFor: 'as yet unclassified' stamp: 'donnivalen 5/15/2020 18:21'!retrieveQuestions: aUser	| popularTCol averageVotes |		popularTCol := cuoora questions select: [ :q | q fromToday ].		averageVotes := (cuoora questions		sum: [ :q | q positiveVotesQuantity ]) / popularTCol size.		^ self		filterQuestion: (popularTCol select: [ :q | q positiveVotesQuantity >= averageVotes ])		Of: aUser! !QuestionRetriever subclass: #Social	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Social methodsFor: 'retrieving' stamp: 'donnivalen 5/15/2020 18:21'!retrieveQuestions: aUser	^ self filterQuestion:(aUser following flatCollect:[:follow | follow questions ])  Of: aUser! !Object subclass: #Topic	instanceVariableNames: 'name description questions'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Topic methodsFor: 'private' stamp: 'donniyvalen 5/11/2020 22:12'!description: aString	description := aString! !!Topic methodsFor: 'private' stamp: 'donniyvalen 5/11/2020 22:12'!name: anString	name := anString! !!Topic methodsFor: 'initialize' stamp: 'SergioFirmenich 4/22/2019 08:14'!initialize	questions := OrderedCollection new.! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:42'!description	^ description! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:42'!questions	^ questions! !!Topic methodsFor: 'accessing' stamp: 'donniyvalen 5/11/2020 22:12'!addQuestion: aQuestion	questions add: aQuestion! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 08:14'!name	^name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'intance creation' stamp: 'SergioFirmenich 4/22/2019 23:39'!name: aName description: aDescription	^ self new		name: aName;		description: aDescription;		yourself! !QuestionRetriever subclass: #Topics	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Topics methodsFor: 'as yet unclassified' stamp: 'donnivalen 5/15/2020 18:21'!retrieveQuestions:aUser		^ self filterQuestion: (aUser topics flatCollect: [ :topic | topic questions ] ) Of: aUser! !Object subclass: #User	instanceVariableNames: 'questionRetriever questions answers username password topics following votes'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!User methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 07:50'!questionRetriever: aQuestionRetriever	questionRetriever := aQuestionRetriever.! !!User methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 07:50'!password: anObject	password := anObject! !!User methodsFor: 'private' stamp: 'donniyvalen 5/15/2020 17:38'!username: aString	username := aString! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!password	^ password! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!questionRetriever	^ questionRetriever! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 08:19'!addVote: aVote	votes add: aVote! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:44'!questionsOfInterest	^ questionRetriever retrieveQuestions: self.! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 08:18'!follow: aUser	following add: aUser ! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!topics	^ topics! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:43'!addQuestion: aQuestion	questions add: aQuestion! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:43'!addTopic: aTopic	topics add: aTopic ! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!username	^ username! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!following	^ following! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!votes	^ votes! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!answers	^ answers! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!questions	^ questions! !!User methodsFor: 'adding' stamp: 'donniyvalen 5/15/2020 17:35'!addAnswer: anAnswer	answers add: anAnswer ! !!User methodsFor: 'initialize' stamp: 'SergioFirmenich 4/23/2019 00:09'!initialize	questions := OrderedCollection new.  	answers := OrderedCollection new. 	topics := OrderedCollection new. 	following := OrderedCollection new. 	votes := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance-creation' stamp: 'SergioFirmenich 4/22/2019 23:36'!username: aUsername password: aPassword questionRetriever: aQuestionRetriever	^ self new		username: aUsername;		password: aPassword;		questionRetriever: aQuestionRetriever;		yourself! !Object subclass: #Vote	instanceVariableNames: 'isLike timstamp publication user'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Vote methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:47'!user	^ user! !!Vote methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:47'!publication	^ publication! !!Vote methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:47'!isLike	^ isLike! !!Vote methodsFor: 'initialize' stamp: 'SergioFirmenich 4/22/2019 14:45'!initialize	isLike := true.	timstamp := DateAndTime now.	! !!Vote methodsFor: 'private' stamp: 'donniyvalen 5/11/2020 22:16'!user: aUser	user := aUser! !!Vote methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 14:50'!dislike	isLike := false.! !!Vote methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 23:37'!like	isLike := true.! !!Vote methodsFor: 'private' stamp: 'donniyvalen 5/11/2020 22:17'!publication: aPost	publication := aPost! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vote class	instanceVariableNames: ''!!Vote class methodsFor: 'instance creation' stamp: 'SergioFirmenich 4/22/2019 23:37'!user: aUser dislikesPublication: aPublication	^ self new		user: aUser;		publication: aPublication;		dislike;		yourself! !!Vote class methodsFor: 'instance creation' stamp: 'SergioFirmenich 4/22/2019 23:37'!user: aUser likesPublication: aPublication	^ self new		user: aUser;		publication: aPublication;		yourself! !